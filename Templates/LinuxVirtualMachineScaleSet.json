{
    "$schema": "https://schema.management.azure.coMicrosoft.Storage/storageAccounts/', variables('storageAcctName')m/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
  "parameters": {
    "resourcesPrefix": {
      "type": "string",
      "defaultValue": "azmooclus",
      "metadata": {
        "description": "Prefix of storage account name, network, virtual machines, and so on"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "metadata": {
        "description": "VM size for the nodes"
      }
    },
    "vmSizesql": {
      "type": "string",
      "defaultValue": "Standard_DS13_v2",
      "metadata": {
        "description": "VM size for the nodes"
      }
    },
    "vmSizemysql": {
      "type": "string",
      "defaultValue": "Standard_DS11_v2",
      "metadata": {
        "description": "VM size for the nodes"
      }
    },
    "vmSizeProtalrm": {
      "type": "string",
      "defaultValue": "Standard_DS2_v2",
      "metadata": {
        "description": "VM size for the nodes"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_DS1_v2",
      "metadata": {
        "description": "VM size for the nodes"
      }
    },
    "moodleVersion": {
      "type": "string",
      "defaultValue": "MOODLE_31_STABLE",
      "allowedValues": [
        "MOODLE_31_STABLE",
        "MOODLE_30_STABLE",
        "MOODLE_29_STABLE"
      ],
      "metadata": {
        "description": "The Moodle version you want to install."
      }
    },
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureadmin",
      "metadata": {
        "description": "ssh user name"
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "ssh password"
      }
    },
    "mySQLuserPassword": {
      "type": "securestring",
      "metadata": {
        "description": "my sql regular user password"
      }
    },
    "mySQLrootPassword": {
      "type": "securestring",
      "metadata": {
        "description": "my sql root user password"
      }
    }
  },
  "variables": {
    "storageAcctName": "[concat(parameters('resourcesPrefix'),'sa')]",
    "jboxpipName": "[concat('jb-',parameters('resourcesPrefix'))]",
    "vnetNamePhp": "[concat(parameters('resourcesPrefix'),'Phpvnet')]",
    "vnetNamePortalRm": "[concat(parameters('resourcesPrefix'),'PortalRmvnet')]",
    "vnetNameAppRm": "[concat(parameters('resourcesPrefix'),'AppRmvnet')]",
    "vmName": "[concat(parameters('resourcesPrefix'),'vm')]",
    "vnetPrefixphp": "172.16.0.0/16",
    "vnetPrefixportalrm": "172.17.0.0/16",
    "vnetPrefixApprm": "172.18.0.0/16",
    "SubnetWeb": "webtier",
    "SubnetWebPrefix": "172.16.0.0/24",
    "SubnetWebRef": "[concat(variables('vnetIDPhp'), '/subnets/', variables('SubnetWeb'))]",
    "PHPvmIPPrefix": "172.16.0.1",
    "PortalRmvmIPPrefix": "172.17.0.1",
    "SubnetWebPortalrm": "Webportalrmtier",
    "SubnetWebPortalrmPrefix": "172.17.0.0/24",
    "SubnetWebRefportalRm": "[concat(variables('vnetIDdbPortalRm'), '/subnets/', variables('SubnetWebPortalrm'))]",
    "GfsVmIPPrefix": "172.18.1.1",
    "volumeName": "data",
    "SubnetDb": "datatier",
    "SubnetDbPrefix": "172.16.1.0/24",
    "dbVmIPPrefix": "172.16.1.1",
    "SubnetDbPortalRM": "dataRmtier",
    "SubnetDbPortalrmPrefix": "172.17.1.0/24",
    "dbportalrmVmIPPrefix": "172.17.1.1",
    "SubnetAppRM": "AppRmtier",
    "SubnetAppRmPrefix": "172.18.1.0/24",
    "SubnetWebRefAppRm": "[concat(variables('vnetIDApprm'), '/subnets/', variables('SubnetAppRM'))]",
    "AppRmVmIPPrefix": "172.18.1.1",
    "IpPHPSQL": "172.16.1.2",
    "IpRMSQL": "172.17.1.2",
    "IPAppSQL": "172.18.1.2",
    "phpnicName": "vmssphpnic",
    "portalrmnicName": "vmssrmnic",
    "vnetIDPhp": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetNamePhp'))]",
    "vnetIDPortalRm": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetNamePortalRm'))]",
    "vnetIDdbPortalRm": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetNamePortalRm'))]",
    "vnetIDApprm": "[resourceId('Microsoft.Network/virtualNetworks',variables('vnetNameAppRm'))]",
    "webSubnetRef": "[concat(variables('vnetIDPhp'),'/subnets/',variables('SubnetWeb'))]",
    "WebPortalRMSubnetRef": "[concat(variables('vnetIDPortalRm'),'/subnets/',variables('SubnetWebPortalRM'))]",
    "SubnetdbportalrmRef": "[concat(variables('vnetIDdbPortalRm'),'/subnets/',variables('SubnetDbPortalRM'))]",
    "dbSubnetRef": "[concat(variables('vnetIDPhp'),'/subnets/',variables('SubnetDb'))]",
    "osImagePublisher": "Canonical",
    "osImageOffer": "UbuntuServer",
    "osImageSKU": "14.04.4-LTS",
    "osImagePublisherWin": "MicrosoftWindowsServer",
    "osImageOfferWin": "WindowsServer",
    "osImageSKUWin": "2012-R2-Datacenter",
    "osImageVersion": "latest",
    "GlusterSetupCmd": "bash azuregfs.sh",
    "customScriptFilePath": "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master/gluster-file-system/azuregfs.sh",
    "scaleNumber": 2,
    "scaleNumberdb": 1,
    "scaleNumbersql": 1,
    "gfsScaleNumber": 2,
    "SharedStorageAccountName": "[concat(variables('storageAcctName'), uniqueString(resourceGroup().id))]",
    "JumpVmOSDiskName": "JumpVmOSDisk",
    "JumpVmVmSize": "Standard_DS1_v2",
    "JumpVmStorageAccountContainerName": "vhds",
    "diagnosticsStorageAccountName": "[variables('SharedStorageAccountName')]",
    "diagnosticsStorageAccountResourceGroup": "[resourceGroup().name]",
    "wadlogs": "<WadCfg><DiagnosticMonitorConfiguration>",
    "wadperfcounters1": "<PerformanceCounters scheduledTransferPeriod=\"PT1M\"><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\AvailableMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentAvailableMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. percent available\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\UsedMemory\" sampleRate=\"PT15S\" unit=\"Bytes\"><annotation displayName=\"Memory used\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedMemory\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Memory percentage\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Memory\\PercentUsedByCache\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"Mem. used by cache\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIdleTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU idle time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentUserTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU user time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentProcessorTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU percentage guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\Processor\\PercentIOWaitTime\" sampleRate=\"PT15S\" unit=\"Percent\"><annotation displayName=\"CPU IO wait time\" locale=\"en-us\"/></PerformanceCounterConfiguration>",
    "wadperfcounters2": "<PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\BytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk total bytes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk read guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WriteBytesPerSecond\" sampleRate=\"PT15S\" unit=\"BytesPerSecond\"><annotation displayName=\"Disk write guest OS\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\TransfersPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk transfers\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\ReadsPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk reads\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\WritesPerSecond\" sampleRate=\"PT15S\" unit=\"CountPerSecond\"><annotation displayName=\"Disk writes\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageReadTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk read time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageWriteTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk write time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageTransferTime\" sampleRate=\"PT15S\" unit=\"Seconds\"><annotation displayName=\"Disk transfer time\" locale=\"en-us\"/></PerformanceCounterConfiguration><PerformanceCounterConfiguration counterSpecifier=\"\\PhysicalDisk\\AverageDiskQueueLength\" sampleRate=\"PT15S\" unit=\"Count\"><annotation displayName=\"Disk queue length\" locale=\"en-us\"/></PerformanceCounterConfiguration></PerformanceCounters>",
    "wadcfgxstart": "[concat(variables('wadlogs'),variables('wadperfcounters1'),variables('wadperfcounters2'),'<Metrics resourceId=\"')]",
    "wadmetricsresourceid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name ,'/providers/','Microsoft.Compute/virtualMachineScaleSets/','vmSS',variables('vmName'))]",
    "wadcfgxend": "[concat('\"><MetricAggregation scheduledTransferPeriod=\"PT1H\"/><MetricAggregation scheduledTransferPeriod=\"PT1M\"/></Metrics></DiagnosticMonitorConfiguration></WadCfg>')]",
    "natPoolName": "natpool",
    "bePoolName": "bePool",
    "natPoolNameportalrm": "natpool_portalrm",
    "bePoolNameportalrm": "bePool_portalrm",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 22,
    "ilbNicName": "ilbnic",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers','lbWebphp')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/ipcfg_lb_php')]",
    "lbProbeID": "[concat(variables('lbID'),'/probes/tcpProbe_php')]",
    "lbPoolID": "[concat(variables('lbID'),'/backendAddressPools/','php', variables('bePoolName'))]",
    "lbIDrm": "[resourceId('Microsoft.Network/loadBalancers','lbWebportalrm')]",
    "frontEndIPConfigIDrm": "[concat(variables('lbIDrm'),'/frontendIPConfigurations/ipcfg_lb_portalrm')]",
    "lbProbeIDrm": "[concat(variables('lbIDrm'),'/probes/tcpProbe_portalrm')]",
    "lbPoolIDrm": "[concat(variables('lbIDrm'),'/backendAddressPools/','portalRm', variables('bePoolNameportalrm'))]",
    "storageApiVersion": "2015-06-15",
    "accountid": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',variables('diagnosticsStorageAccountResourceGroup'),'/providers/','Microsoft.Storage/storageAccounts/', variables('diagnosticsStorageAccountName'))]",
    "osType": {
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "14.04.4-LTS",
      "version": "latest"
    },
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses','webpipphp')]",
    "publicIPAddressIDRM": "[resourceId('Microsoft.Network/publicIPAddresses','webpipportalrm')]",
    "siteFQDN": "",
    "phpScriptLocation": "https://raw.githubusercontent.com/ftvello/ERP-ProducaoV1_GH/master/Scripts/",
    "install_phpScriptFileName": "install_php.sh",
    "setup_phpScriptFileName": "setup_php.sh",
    "mariadbScriptLocation": "https://raw.githubusercontent.com/ftvello/ERP-ProducaoV1_GH/master/Scripts/",
    "install_mariadbScriptFileName": "install_mariadb.sh",
    "portalrmScriptLocation": "https://raw.githubusercontent.com/ftvello/ERP-ProducaoV1_GH/master/Scripts/",
    "portalrmScriptFileName": "install_portalrm.ps1",
    "nodeDBCount": 1,
    "subnetIPBase": "172.16.1.",
    "mariadbbe": "[concat(resourceId('Microsoft.Network/loadBalancers','mariadblb'),'/backendAddressPools/mariadb-be')]",
    "mariadbfipc": "[concat(resourceId('Microsoft.Network/loadBalancers','mariadblb'),'/frontendIPConfigurations/mariadb-fipc')]",
    "mariadbprobe": "[concat(resourceId('Microsoft.Network/loadBalancers','mariadblb'),'/probes/mariadb-probe')]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-05-01-preview",
      "copy": {
        "name": "vmssphp",
        "count": 5
      },
      "location": "[resourceGroup().location]",
      "name": "[concat('vmssphp',variables('storageAcctName'), copyIndex())]",
      "properties": {
        "accountType": "Standard_LRS"
      },
      "tags": {
        "displayName": "VmssphpStorageAccount"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2015-05-01-preview",
      "copy": {
        "name": "vmssrm",
        "count": 5
      },
      "location": "[resourceGroup().location]",
      "name": "[concat('vmssrm',variables('storageAcctName'), copyIndex())]",
      "properties": {
        "accountType": "Standard_LRS"
      },
      "tags": {
        "displayName": "VmssrmStorageAccount"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat('dbphp', variables('storageAcctName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "copy": {
        "name": "dbphp",
        "count": "[variables('scaleNumberdb')]"
      },
      "tags": {
        "displayName": "DatabaseStorageAccount"
      },
      "properties": {
        "accountType": "Premium_LRS"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat('sql', variables('storageAcctName'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "copy": {
        "name": "sql",
        "count": "[variables('scaleNumbersql')]"
      },
      "tags": {
        "displayName": "SqlDBStorageAccount"
      },
      "properties": {
        "accountType": "Premium_LRS"
      }
    },
    {
      "name": "[variables('SharedStorageAccountName')]",
      "type": "Microsoft.Storage/storageAccounts",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "SharedStorageAccount"
      },
      "properties": {
        "accountType": "Standard_LRS"
      }
    },
    {
      "name": "[variables('vnetNamePhp')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "PHPVirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetPrefixphp')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('SubnetWeb')]",
            "properties": {
              "addressPrefix": "[variables('SubnetWebPrefix')]"
            }
          },
          {
            "name": "[variables('SubnetDb')]",
            "properties": {
              "addressPrefix": "[variables('SubnetDbPrefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vnetNamePortalRm')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "PortalRMVirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetPrefixportalrm')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('SubnetWebPortalrm')]",
            "properties": {
              "addressPrefix": "[variables('SubnetWebPortalrmPrefix')]"
            }
          },
          {
            "name": "[variables('SubnetDbPortalRM')]",
            "properties": {
              "addressPrefix": "[variables('SubnetDbPortalrmPrefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('vnetNameAppRm')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "AppRMVirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('vnetPrefixApprm')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('SubnetAppRM')]",
            "properties": {
              "addressPrefix": "[variables('SubnetAppRmPrefix')]"
            }
          }
        ]
      }
    },
    {
      "name": "[variables('jboxpipName')]",
      "type": "Microsoft.Network/publicIPAddresses",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "jboxpip"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('jBoxPipName')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "jboxNsg",
      "apiVersion": "2016-03-30",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "Allow_SSH",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "Allow_http",
            "properties": {
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1005,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('sqlphpnic', copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SQLphpNic"
      },
      "copy": {
        "name": "sqlphp",
        "count": "[variables('scaleNumberdb')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNamePhp'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipcfg_Sqlphp",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('dbVmIPPrefix'), copyindex(2))]",
              "subnet": {
                "id": "[variables('dbSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('sqlRmnic', copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SQLRmNic"
      },
      "copy": {
        "name": "sqlRm",
        "count": "[variables('scaleNumberdb')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNamePortalRm'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipcfg_SqlRm",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('dbportalrmVmIPPrefix'), copyindex(2))]",
              "subnet": {
                "id": "[variables('SubnetdbportalrmRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('sqlAppnic', copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SQLAppNic"
      },
      "copy": {
        "name": "sqlApp",
        "count": "[variables('scaleNumberdb')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNameAppRm'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipcfg_SqlApp",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('AppRmVmIPPrefix'), copyindex(2))]",
              "subnet": {
                "id": "[variables('SubnetWebRefAppRm')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat('dbnic', copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "dbNic"
      },
      "copy": {
        "name": "db",
        "count": "[variables('scaleNumber')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNamePhp'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipcfg_db",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(variables('dbVmIPPrefix'), copyindex())]",
              "subnet": {
                "id": "[variables('dbSubnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "name": "jboxnic",
      "type": "Microsoft.Network/networkInterfaces",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNamePhp'))]",
        "[concat('Microsoft.Network/publicIPAddresses/', variables('jboxpipName'))]"
      ],
      "tags": {
        "displayName": "jboxNic"
      },
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipcfgjbox",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[variables('SubnetWebRef')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('jboxpipName'))]"
              }
            },
            "networkSecurityGroup": {
              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', 'jboxNsg')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "webpipphp",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[tolower(concat('nlb-web',parameters('resourcesPrefix')))]"
        },
        "publicIPAllocationMethod": "static",
        "tags": {
          "displayName": "webpipphp"
        }
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "webpipportalrm",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "properties": {
        "dnsSettings": {
          "domainNameLabel": "[tolower(concat('nlb-PortalRm',parameters('resourcesPrefix')))]"
        },
        "publicIPAllocationMethod": "static",
        "tags": {
          "displayName": "webpipportalrm"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('dbphp',variables('vmName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "dbphpVms"
      },
      "copy": {
        "name": "db",
        "count": "[variables('scaleNumberdb')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', 'dbnic', copyindex())]",
        "[concat('Microsoft.Storage/storageAccounts/', 'dbphp', variables('storageAcctName'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', 'dbAvSet')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizemysql')]"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets','dbAvSet')]"
        },
        "osProfile": {
          "computerName": "[concat('dbphp',variables('vmName'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', 'dbphp', variables('storageAcctName'), copyindex(), '.blob.core.windows.net/vhds/', 'dbphp',variables('vmName'), copyIndex(), 'osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "datadisk1",
              "diskSizeGB": "128",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://', 'dbphp', variables('storageAcctName'), copyindex(),'.blob.core.windows.net/vhds/', 'dbphp', variables('vmName'), copyIndex(), 'datadisk1.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('dbNic', copyindex()))]"
            }
          ]
        }
      },
      "resources": [
        {
          "name": "install_mariadb",
          "type": "extensions",
          "location": "[resourceGroup().location]",
          "apiVersion": "2015-06-15",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/','dbphp',variables('vmName'),copyIndex())]"
          ],
          "tags": {
            "displayName": "install_mariadb"
          },
          "properties": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": [
                "[concat(variables('mariadbScriptLocation'),variables('install_mariadbScriptFileName'))]"
              ],
              "commandToExecute": "[concat('bash ', variables('install_mariadbScriptFileName'),' ', variables('nodeDBCount'), ' ', parameters('mySQLrootPassword'),' ',variables('subnetIPBase'), ' ', parameters('mySQLuserPassword'))]"
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat('SQL',variables('vmName'), copyindex())]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "SQL"
      },
      "copy": {
        "name": "sql",
        "count": "[variables('scaleNumberdb')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', 'sqlphpnic', copyindex())]",
        "[concat('Microsoft.Network/networkInterfaces/', 'sqlRmnic', copyindex())]",
        "[concat('Microsoft.Network/networkInterfaces/', 'sqlAppnic', copyindex())]",
        "[concat('Microsoft.Storage/storageAccounts/', 'sql', variables('storageAcctName'), copyindex())]",
        "[concat('Microsoft.Compute/availabilitySets/', 'sqlAvSet')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSizesql')]"
        },
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets','sqlAvSet')]"
        },
        "osProfile": {
          "computerName": "[concat('sql',variables('vmName'), copyIndex())]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisherWin')]",
            "offer": "[variables('osImageOfferWin')]",
            "sku": "[variables('osImageSKUWin')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://', 'sql', variables('storageAcctName'), copyindex(), '.blob.core.windows.net/vhds/', 'sql',variables('vmName'), copyIndex(), 'osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          },
          "dataDisks": [
            {
              "name": "datadisk1",
              "diskSizeGB": "128",
              "lun": 0,
              "vhd": {
                "uri": "[concat('http://', 'sql', variables('storageAcctName'), copyindex(),'.blob.core.windows.net/vhds/', 'sql', variables('vmName'), copyIndex(), 'datadisk1.vhd')]"
              },
              "createOption": "Empty"
            },
            {
              "name": "datadisk2",
              "diskSizeGB": "128",
              "lun": 1,
              "vhd": {
                "uri": "[concat('http://', 'sql', variables('storageAcctName'), copyindex(),'.blob.core.windows.net/vhds/', 'sql', variables('vmName'), copyIndex(), 'datadisk2.vhd')]"
              },
              "createOption": "Empty"
            },
            {
              "name": "datadisk3",
              "diskSizeGB": "512",
              "lun": 2,
              "vhd": {
                "uri": "[concat('http://', 'sql', variables('storageAcctName'), copyindex(0),'.blob.core.windows.net/vhds/', 'sql', variables('vmName'), copyIndex(), 'datadisk3.vhd')]"
              },
              "createOption": "Empty"
            }
          ]
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "properties": {
                "primary": true
              },
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat('sqlphpnic', copyindex()))]"
            }
          ]
            }
      }
    },
    {
      "name": "[concat('jbox',variables('vmName'))]",
      "type": "Microsoft.Compute/virtualMachines",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('SharedStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', 'jboxnic')]"
      ],
      "tags": {
        "displayName": "JumpVm"
      },
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('JumpVmVmSize')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', 'jboxNic')]"
            }
          ]
        },
        "osProfile": {
          "computerName": "[concat('jbox',variables('vmName'))]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "caching": "ReadWrite",
            "createOption": "FromImage",
            "name": "JumpVmOSDisk",
            "vhd": {
              "uri": "[concat('http://', variables('SharedStorageAccountName'), '.blob.core.windows.net/vhds/jbox', variables('vmName'), '-osdisk.vhd')]"
            }
          }
        }
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "name": "lbWebphp",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/','webpipphp')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "ipcfg_lb_php",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[concat('php', variables('bePoolName'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "lbhttp_php",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          },
          {
            "name": "lbhttps_php",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolID')]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeID')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe_php",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": "5",
              "numberOfProbes": "3"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[concat('php', variables('natPoolName'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "name": "lbWebportalrm",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/','webpipportalrm')]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "ipcfg_lb_portalrm",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressIDRM')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[concat('portalRm', variables('bePoolNameportalrm'))]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "lbhttp_portalrm",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigIDrm')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolIDrm')]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeIDrm')]"
              }
            }
          },
          {
            "name": "lbhttps_portalrm",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigIDrm')]"
              },
              "backendAddressPool": {
                "id": "[variables('lbPoolIDrm')]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[variables('lbProbeIDrm')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpProbe_portalrm",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": "5",
              "numberOfProbes": "3"
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[concat('portalrm', variables('natPoolNameportalrm'))]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigIDrm')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "webfarm_php",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssphp',variables('storageAcctName'), '0')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssphp',variables('storageAcctName'), '1')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssphp',variables('storageAcctName'), '2')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssphp',variables('storageAcctName'), '3')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssphp',variables('storageAcctName'), '4')]",
        "[concat('Microsoft.Network/loadBalancers/', 'lbWebphp')]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNamephp'))]"
      ],
      "tags": {
        "displayName": "webfarm_php"
      },
      "sku": {
        "capacity": 2,
        "name": "Standard_DS1_v2",
        "tier": "Standard"
      },
      "properties": {
        "overprovision": "true",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', 'vmssphp', variables('storageAcctName'), '0.blob.core.windows.net/vhds0')]",
                "[concat('https://', 'vmssphp', variables('storageAcctName'), '1.blob.core.windows.net/vhds1')]",
                "[concat('https://', 'vmssphp', variables('storageAcctName'), '2.blob.core.windows.net/vhds2')]",
                "[concat('https://', 'vmssphp', variables('storageAcctName'), '3.blob.core.windows.net/vhds3')]",
                "[concat('https://', 'vmssphp', variables('storageAcctName'), '4.blob.core.windows.net/vhds4')]"
              ],
              "name": "osdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            },
            "imageReference": {
              "publisher": "[variables('osImagePublisher')]",
              "offer": "[variables('osImageOffer')]",
              "sku": "[variables('osImageSKU')]",
              "version": "[variables('osImageVersion')]"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[concat('webphp',variables('vmName'))]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('phpnicName')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "ipcfg_lb_php",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('vnetNamePhp'), '/subnets/', variables('subnetWeb'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/lbWebphp/backendAddressPools/', 'php', variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/lbWebphp/inboundNatPools/', 'php', variables('natPoolName'))]"
                          }
                        ]
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "LinuxDiagnostic",
                "properties": {
                  "publisher": "Microsoft.OSTCExtensions",
                  "type": "LinuxDiagnostic",
                  "typeHandlerVersion": "2.3",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "xmlCfg": "[base64(concat(variables('wadcfgxstart'),variables('wadmetricsresourceid'),variables('wadcfgxend')))]",
                    "storageAccount": "[variables('diagnosticsStorageAccountName')]"
                  },
                  "protectedSettings": {
                    "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listkeys(variables('accountid'), variables('storageApiVersion')).key1]",
                    "storageAccountEndPoint": "https://core.windows.net"
                  }
                }
              },
              {
                "name": "install_php",
                "properties": {
                  "publisher": "Microsoft.OSTCExtensions",
                  "type": "CustomScriptForLinux",
                  "typeHandlerVersion": "1.4",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": [
                      "[concat(variables('phpScriptLocation'),variables('install_phpScriptFileName'))]"
                    ],
                    "commandToExecute": "[concat('bash', variables('install_phpScriptFileName'))]"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "webfarm_Rm",
      "location": "[resourceGroup().location]",
      "apiVersion": "2016-03-30",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssrm',variables('storageAcctName'), '0')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssrm',variables('storageAcctName'), '1')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssrm',variables('storageAcctName'), '2')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssrm',variables('storageAcctName'), '3')]",
        "[concat('Microsoft.Storage/storageAccounts/', 'vmssrm',variables('storageAcctName'), '4')]",
        "[concat('Microsoft.Network/loadBalancers/', 'lbWebportalrm')]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetNamePortalRm'))]"
      ],
      "tags": {
        "displayName": "webfarm_Rm"
      },
      "sku": {
        "capacity": 2,
        "name": "Standard_DS2_v2",
        "tier": "Standard"
      },
      "properties": {
        "overprovision": "true",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "vhdContainers": [
                "[concat('https://', 'vmssrm', variables('storageAcctName'), '0.blob.core.windows.net/vhds0')]",
                "[concat('https://', 'vmssrm', variables('storageAcctName'), '1.blob.core.windows.net/vhds1')]",
                "[concat('https://', 'vmssrm', variables('storageAcctName'), '2.blob.core.windows.net/vhds2')]",
                "[concat('https://', 'vmssrm', variables('storageAcctName'), '3.blob.core.windows.net/vhds3')]",
                "[concat('https://', 'vmssrm', variables('storageAcctName'), '4.blob.core.windows.net/vhds4')]"
              ],
              "name": "osdisk",
              "caching": "ReadOnly",
              "createOption": "FromImage"
            },
            "imageReference": {
              "publisher": "[variables('osImagePublisherWin')]",
              "offer": "[variables('osImageOfferWin')]",
              "sku": "[variables('osImageSKUWin')]",
              "version": "[variables('osImageVersion')]"
            }
          },
          "osProfile": {
            "computerNamePrefix": "Portalrm",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('portalrmnicName')]",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "ipcfg_lb_portalrm",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('vnetNamePortalRm'), '/subnets/', variables('SubnetWebPortalrm'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/lbWebportalrm/backendAddressPools/', 'portalRm', variables('bePoolNameportalrm'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/lbWebportalrm/inboundNatPools/', 'portalrm', variables('natPoolNameportalrm'))]"
                          }
                        ]
                      }
                    }
                  ],
                  "primary": "true"
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "AzureDiagnostics",
                "properties": {
                  "publisher": "Microsoft.Azure.Diagnostics",
                  "type": "IaaSDiagnostics",
                  "typeHandlerVersion": "1.5",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "xmlCfg": "[base64(concat(variables('wadcfgxstart'),variables('wadmetricsresourceid'),variables('wadcfgxend')))]",
                    "storageAccount": "[variables('diagnosticsStorageAccountName')]"
                  },
                  "protectedSettings": {
                    "storageAccountName": "[variables('diagnosticsStorageAccountName')]",
                    "storageAccountKey": "[listkeys(variables('accountid'), variables('storageApiVersion')).key1]",
                    "storageAccountEndPoint": "https://core.windows.net"
                  }
                }
              },
              {
                "name": "install_portalrm",
                "properties": {
                  "publisher": "Microsoft.Compute",
                  "type": "CustomScriptExtension",
                  "typeHandlerVersion": "1.4",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "fileUris": [
                      "[concat(variables('portalrmScriptLocation'),variables('portalrmScriptFileName'))]"
                    ],
                    "commandToExecute": "[concat('powershell -ExecutionPolicy Unrestricted -File ', variables('portalrmScriptFileName'))]"
                  }
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "dbAvSet",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "dbAvSet"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 3
      }
    },
    {
      "name": "sqlAvSet",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[resourceGroup().location]",
      "apiVersion": "2015-06-15",
      "dependsOn": [],
      "tags": {
        "displayName": "sqlAvSet"
      },
      "properties": {
        "platformUpdateDomainCount": 5,
        "platformFaultDomainCount": 3
      },
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "autoscalewad",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Microsoft.Compute/virtualMachineScaleSets/webfarm_php"
      ],
      "properties": {
        "name": "autoscalewad",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', 'webfarm_php')]",
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "2",
              "maximum": "5",
              "default": "2"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "\\Processor\\PercentProcessorTime",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/','webfarm_php')]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "\\Processor\\PercentProcessorTime",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', 'webfarm_php')]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 50
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "autoscalewad_Rm",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "Microsoft.Compute/virtualMachineScaleSets/webfarm_Rm"
      ],
      "properties": {
        "name": "autoscalewad_Rm",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', 'webfarm_Rm')]",
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "2",
              "maximum": "5",
              "default": "2"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "\\Processor\\PercentProcessorTime",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/','webfarm_Rm')]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 80
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "\\Processor\\PercentProcessorTime",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', 'webfarm_Rm')]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 50
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ]
      }
    }
  ]
    }